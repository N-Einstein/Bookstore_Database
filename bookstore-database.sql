-- MySQL Script generated by MySQL Workbench
-- Sun Jun 10 01:57:06 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema bookstore_database
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `bookstore_database` ;

-- -----------------------------------------------------
-- Schema bookstore_database
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bookstore_database` DEFAULT CHARACTER SET utf8 ;
USE `bookstore_database` ;

-- -----------------------------------------------------
-- Table `bookstore_database`.`USER`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bookstore_database`.`USER` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Email` VARCHAR(100) NOT NULL,
  `FName` VARCHAR(50) NOT NULL,
  `LName` VARCHAR(50) NOT NULL,
  `Password` VARCHAR(100) NOT NULL,
  `Role` INT NOT NULL,
  `Address` VARCHAR(100) NULL,
  `Telephone` VARCHAR(50) NULL,
  `UserName` VARCHAR(45) NOT NULL,
  `valid` TINYINT(1) NULL DEFAULT 1,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC),
  UNIQUE INDEX `Email_UNIQUE` (`Email` ASC),
  UNIQUE INDEX `UserName_UNIQUE` (`UserName` ASC),
  INDEX `firstName` (`FName` ASC),
  INDEX `lastName` (`LName` ASC),
  INDEX `telephone` (`Telephone` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bookstore_database`.`PUBLISHER`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bookstore_database`.`PUBLISHER` (
  `Name` VARCHAR(50) NOT NULL,
  `Address` VARCHAR(100) NULL,
  `Telephone` VARCHAR(50) NULL,
  `valid` TINYINT(1) NULL DEFAULT 1,
  PRIMARY KEY (`Name`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bookstore_database`.`BOOK`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bookstore_database`.`BOOK` (
  `ISBN` VARCHAR(13) NOT NULL,
  `Title` VARCHAR(100) NOT NULL,
  `Publisher` VARCHAR(50) NOT NULL,
  `Category` VARCHAR(50) NOT NULL,
  `Price` DECIMAL(10,2) NOT NULL,
  `PublicationYear` YEAR NOT NULL,
  `CoverImage` VARCHAR(100) NULL,
  `valid` TINYINT(1) NULL DEFAULT 1,
  PRIMARY KEY (`ISBN`),
  UNIQUE INDEX `ISBN_UNIQUE` (`ISBN` ASC),
  INDEX `BookFKPublisherName_idx` (`Publisher` ASC),
  INDEX `title` (`Title` ASC),
  INDEX `category` (`Category` ASC),
  INDEX `price` (`Price` ASC),
  INDEX `year` (`PublicationYear` ASC),
  CONSTRAINT `BookFKPublisherName`
    FOREIGN KEY (`Publisher`)
    REFERENCES `bookstore_database`.`PUBLISHER` (`Name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bookstore_database`.`STOCK`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bookstore_database`.`STOCK` (
  `ISBN` VARCHAR(13) NOT NULL,
  `Threshold` INT NOT NULL,
  `Quantity` INT NOT NULL,
  `valid` TINYINT(1) NULL DEFAULT 1,
  PRIMARY KEY (`ISBN`),
  UNIQUE INDEX `ISBN_UNIQUE` (`ISBN` ASC),
  CONSTRAINT `StockFKBookISBN`
    FOREIGN KEY (`ISBN`)
    REFERENCES `bookstore_database`.`BOOK` (`ISBN`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bookstore_database`.`LIBRARY_ORDERS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bookstore_database`.`LIBRARY_ORDERS` (
  `OrderId` INT NOT NULL AUTO_INCREMENT,
  `UserId` INT NULL,
  `ISBN` VARCHAR(13) NOT NULL,
  `Quantity` INT NOT NULL,
  `Date` DATE NOT NULL,
  `valid` TINYINT(1) NULL DEFAULT 1,
  PRIMARY KEY (`OrderId`),
  UNIQUE INDEX `OrderId_UNIQUE` (`OrderId` ASC),
  INDEX `LibraryOrderFkUserID_idx` (`UserId` ASC),
  INDEX `LibraryOrderFKBookISBN_idx` (`ISBN` ASC),
  CONSTRAINT `LibraryOrderFkUserID`
    FOREIGN KEY (`UserId`)
    REFERENCES `bookstore_database`.`USER` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `LibraryOrderFKBookISBN`
    FOREIGN KEY (`ISBN`)
    REFERENCES `bookstore_database`.`BOOK` (`ISBN`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bookstore_database`.`AUTHOR`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bookstore_database`.`AUTHOR` (
  `AuthorName` VARCHAR(50) NOT NULL,
  `BookISBN` VARCHAR(13) NOT NULL,
  `valid` TINYINT(1) NULL DEFAULT 1,
  PRIMARY KEY (`BookISBN`, `AuthorName`),
  CONSTRAINT `AuthorFKBookISBN`
    FOREIGN KEY (`BookISBN`)
    REFERENCES `bookstore_database`.`BOOK` (`ISBN`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bookstore_database`.`USERS_ORDERS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bookstore_database`.`USERS_ORDERS` (
  `OrderId` INT NOT NULL AUTO_INCREMENT,
  `UserId` INT NOT NULL,
  `Date` TIMESTAMP NOT NULL,
  `TotalPrice` DECIMAL(10,2) NOT NULL,
  `valid` TINYINT(1) NULL DEFAULT 1,
  PRIMARY KEY (`OrderId`),
  UNIQUE INDEX `OrderId_UNIQUE` (`OrderId` ASC),
  INDEX `UsersOrdersFKUserId_idx` (`UserId` ASC),
  CONSTRAINT `UsersOrdersFKUserId`
    FOREIGN KEY (`UserId`)
    REFERENCES `bookstore_database`.`USER` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bookstore_database`.`RECIEPT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bookstore_database`.`RECIEPT` (
  `OrderId` INT NOT NULL,
  `ISBN` VARCHAR(13) NOT NULL,
  `Quantity` INT NOT NULL,
  `valid` TINYINT(1) NULL DEFAULT 1,
  PRIMARY KEY (`OrderId`, `ISBN`),
  INDEX `RecieptFKISBN_idx` (`ISBN` ASC),
  CONSTRAINT `RecieptFKOrderId`
    FOREIGN KEY (`OrderId`)
    REFERENCES `bookstore_database`.`USERS_ORDERS` (`OrderId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `RecieptFKISBN`
    FOREIGN KEY (`ISBN`)
    REFERENCES `bookstore_database`.`BOOK` (`ISBN`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `bookstore_database`;

DELIMITER $$
USE `bookstore_database`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bookstore_database`.`BOOK_BEFORE_INSERT` BEFORE INSERT ON `BOOK` FOR EACH ROW
BEGIN
declare c int;
select count(*) into c
from BOOK;
/*
if (c = 1000000) 
then 

SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = "Books number cannot exceed 1000000!";
end if;
*/
if (upper(new.category) != upper('art') && upper(new.category) != upper('Science') && upper(new.category) != upper('Religion')  &&  upper(new.category) != upper('History') && upper(new.category) != upper('Geography')) 
then
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = "Books category is not supported yet";
end if;
END$$

USE `bookstore_database`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bookstore_database`.`BOOK_BEFORE_UPDATE` BEFORE UPDATE ON `BOOK` FOR EACH ROW
BEGIN
declare c int;
select count(*) into c
from BOOK;
/*
if (c = 1000000) 
then 

SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = "Books number cannot exceed 1000000!";
end if;
*/
if (upper(new.category) != upper('art') && upper(new.category) != upper('Science') && upper(new.category) != upper('Religion')  &&  upper(new.category) != upper('History') && upper(new.category) != upper('Geography')) 
then
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = "Books category is not supported yet";
end if;
END$$

USE `bookstore_database`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bookstore_database`.`STOCK_AFTER_INSERT` AFTER INSERT ON `STOCK` FOR EACH ROW
BEGIN
declare d date;
select curdate() into d;
if (new.Quantity < new.Threshold) 
then
INSERT INTO LIBRARY_ORDERS (UserId, ISBN, Quantity, Date) VALUES (1, new.ISBN, new.Threshold, d);
end if;

END$$

USE `bookstore_database`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bookstore_database`.`STOCK_AFTER_UPDATE` AFTER UPDATE ON `STOCK` FOR EACH ROW
BEGIN
declare d date;
select curdate() into d;
if (new.Quantity < new.Threshold) 
then
INSERT INTO LIBRARY_ORDERS (UserId, ISBN, Quantity, Date) VALUES (1, new.ISBN, new.Threshold, d);
end if;

END$$


DELIMITER ;


use bookStore_database;
SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
SET GLOBAL event_scheduler = ON;
Delimiter $$
CREATE DEFINER=`root`@`localhost` EVENT my_event 
ON SCHEDULE EVERY 1 day
ON COMPLETION NOT PRESERVE ENABLE DO 
BEGIN
    UPDATE users_orders SET `valid`= 0 where users_orders.Date < (NOW() - INTERVAL 3 month);
END
$$

drop event my_event;
